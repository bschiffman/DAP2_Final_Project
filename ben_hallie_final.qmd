```{python}
#load in necessary packages
import pandas as pd
import altair as alt
```

```{python}
#load in all the data
path = r"/Users/hallielovin/Documents/GitHub/DAP2_Final_Project/Data"
ben_path = r"/Users/benschiffman/Desktop/Python 2/DAP2_Final_Project"

le = r"Life_Expectancy.csv"

le_df = pd.read_csv(os.path.join(ben_path, le))

income = r"Median_Income.csv"

income_df = pd.read_csv(os.path.join(ben_path, income))

safe_play = r"Safe_Play_Places.csv"

safe_play_df = pd.read_csv(os.path.join(ben_path, safe_play))

crime = r"Serious_Violent_Crimes.csv"

crime_df = pd.read_csv(os.path.join(ben_path, crime))
```

```{python}
common_col = ["OBJECTID", "Geography ID", "Geography Type", "Name"]

le_df.columns = [col if col in common_col else "le_" + col for col in le_df.columns]

income_df.columns = [col if col in common_col else "income_" + col for col in income_df.columns]

safe_play_df.columns = [col if col in common_col else "safe_play_" + col for col in safe_play_df.columns]

crime_df.columns = [col if col in common_col else "crime_" + col for col in crime_df.columns]
```

```{python}
#merge the df all together
df = pd.merge(crime_df, income_df, on = common_col, how = "outer")

df = pd.merge(le_df, df, on = common_col, how = "outer")

df = pd.merge(safe_play_df, df, on = common_col, how = "outer")

```

```{python}
#doing some renaming to make columns more easily accessible 
df.rename(columns={"safe_play_Percentage of Children (Ages 1 to 17 Years) With Easy Access to a Park, Playground, or Other Safe Place to Play": "perc_safe_play_places", "le_Life Expectancy at Birth ": "le_at_birth", "income_Median Household Income": "median_income","crime_Serious Violent Crimes (per 100,000 Population), 2022": "crime"}, inplace=True)
```

```{python}
#some data exploration 
#maybe see if groups by above or below mean of safe play places make distinct groups in violent crime & life expectancy with income
safe_play_mean_df = df.copy()
safe_play_mean_df = safe_play_mean_df[["Name", "perc_safe_play_places",'le_at_birth', 'crime', 'median_income']]

safe_play_mean_df = safe_play_mean_df.dropna(subset=["perc_safe_play_places"])

safe_mean = safe_play_mean_df["perc_safe_play_places"].mean()

safe_play_mean_df["play_above_mean"] = safe_play_mean_df["perc_safe_play_places"].apply(lambda x: 1 if x > safe_mean else 0)


#renaming for ease of labeling (help from chatGPT)
safe_play_mean_df["play_above_mean"] = safe_play_mean_df["play_above_mean"].map({0: "Below Avg", 1: "Above Avg"})
```

```{python}
#first plot exploring the above data
scatter = alt.Chart(safe_play_mean_df).mark_circle().encode(
    alt.X("median_income:Q", 
        scale = alt.Scale(domain=[safe_play_mean_df["median_income"].min(), safe_play_mean_df["median_income"].max()]),
        title = "Median Income"),
    alt.Y("le_at_birth:Q", 
        scale = alt.Scale(domain=[safe_play_mean_df["le_at_birth"].min()-2, safe_play_mean_df["le_at_birth"].max()+2]),
        title = "Life Expectancy"),
    color = alt.Color("play_above_mean:N", 
        title = "Safe Play Places")
).properties(
    title = "Exploring Life Expectancy and Median Income by Safe Play Place Access"
) #title rewritten with chatGPT

safe_play_plot = scatter + scatter.transform_regression("median_income", "le_at_birth", groupby = ["play_above_mean"]).mark_line()

safe_play_plot.show()

safe_play_plot.save("safe_play_plot.png")
```

From some observation of the graph output above, I see a compelling story here. When controlling for safe play places being above or below the mean, there seems to be a substantial differnce in the spread of life expectancy and median incomes. Below average play places seem to have a much lower income ceiling, and certainly lower life expectancies. The higher slope for below average play places also indicates the effects are higher for increases on the lower end of the spectrum. There will be many confounders here, so a much more rigorous statistical analysis will be needed to determine any causality especially given the likely confounders at play. 

```{python}
#second plot experiment
#I'm thinking to do something with crime data and area?

crime_plot_df = df.copy()
crime_plot_df = crime_plot_df.rename(columns = {'crime_Serious Violent Crimes (per 100,000 Population), 2018-2022':"crime_2018_2022"})

crime_plot_df = crime_plot_df[['Geography ID', 'Geography Type',"crime_2018_2022", 'perc_safe_play_places', 'median_income', 'crime_Shape__Area']]
```

```{python}
#exploring some options for making the data useful

#area data super right skewed, lets try to remove those
"""
crime_plot_df['crime_Shape__Area'].describe()
crime_plot_df['crime_Shape__Area'] = crime_plot_df['crime_Shape__Area'] <  3.103419e+08
"""
#actually its just not great on its own. Lets do big and small
mean_area = crime_plot_df['crime_Shape__Area'].median()
crime_plot_df['big_small'] = crime_plot_df['crime_Shape__Area'].apply(lambda x: "big" if x > mean_area else "small")

crime_plot_df['Geography Type'] = crime_plot_df['Geography Type'].apply(lambda x: "Unincorperated" if x == "Unincorporated Los Angeles County" else x)
```

```{python}
#boxplot
big_small_box = alt.Chart(crime_plot_df).mark_boxplot().encode(
    alt.X("big_small:N",  title = "Big or Small Municipality"),
    alt.Y("crime_2018_2022:Q", title = "Crime Rate per 10,000 2018-2022"),
    color = alt.Color("big_small:N")
).properties(
    title = "Crime Rate by Relative Municipality Size"
)

#histogram of geo type by size

geotype_hist = alt.Chart(crime_plot_df).mark_bar().encode(
    alt.X("big_small:N", title = "Big or Small Municipality"),
    alt.Y("count()", title = "Count"),
    color = "Geography Type"
).properties(
    title = "Share of Incorporated Municipalities by Size"
)

muni_size_plot = (big_small_box | geotype_hist).properties(
    title = alt.TitleParams(
        text = "Municipality Size and Incorporation Analysis",
        anchor = "middle",
        fontSize = 22
    )
)
muni_size_plot.show()

muni_size_plot.save("muni_size_plot.png")
```

=======
```

```{python}
#find the mean of the % of safe play places
safe_mean = df["perc_safe_play_places"].mean()
```

```{python}
#find the mean of le
le_mean = df["le_at_birth"].mean()
```

```{python}
#find the mean of income 
income_mean = df["median_income"].mean()
```

```{python}
#find the mean of crime 
crime_mean = df["crime"].mean()
```

```{python}
#import altair 
import altair as alt
```
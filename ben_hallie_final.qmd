```{python}
#load in necessary packages
import pandas as pd
```

```{python}
#load in all the data
path = r"/Users/hallielovin/Documents/GitHub/DAP2_Final_Project/Data"
ben_path = r"/Users/benschiffman/Desktop/Python 2/DAP2_Final_Project"

le = r"Life_Expectancy.csv"

le_df = pd.read_csv(os.path.join(ben_path, le))

income = r"Median_Income.csv"

income_df = pd.read_csv(os.path.join(ben_path, income))

safe_play = r"Safe_Play_Places.csv"

safe_play_df = pd.read_csv(os.path.join(ben_path, safe_play))

crime = r"Serious_Violent_Crimes.csv"

crime_df = pd.read_csv(os.path.join(ben_path, crime))
```

```{python}
common_col = ["OBJECTID", "Geography ID", "Geography Type", "Name"]

le_df.columns = [col if col in common_col else "le_" + col for col in le_df.columns]

income_df.columns = [col if col in common_col else "income_" + col for col in income_df.columns]

safe_play_df.columns = [col if col in common_col else "safe_play_" + col for col in safe_play_df.columns]

crime_df.columns = [col if col in common_col else "crime_" + col for col in crime_df.columns]
```

```{python}
#merge the df all together
df = pd.merge(crime_df, income_df, on = common_col, how = "outer")

df = pd.merge(le_df, df, on = common_col, how = "outer")

df = pd.merge(safe_play_df, df, on = common_col, how = "outer")

df.head()
```

```{python}
#doing some renaming to make columns more easily accessible 
df.rename(columns={"safe_play_Percentage of Children (Ages 1 to 17 Years) With Easy Access to a Park, Playground, or Other Safe Place to Play": "perc_safe_play_places", "le_Life Expectancy at Birth ": "le_at_birth", "income_Median Household Income": "median_income","crime_Serious Violent Crimes (per 100,000 Population), 2022": "crime"}, inplace=True)

df.head()
```

```{python}
#some data exploration 
#maybe see if groups by above or below mean of safe play places make distinct groups in violent crime & life expectancy with income
safe_play_mean_df = df.copy()
safe_play_mean_df = safe_play_mean_df[["Name", "perc_safe_play_places",'le_at_birth', 'crime', 'median_income']]

safe_play_mean_df = safe_play_mean_df.dropna(subset=["perc_safe_play_places"])

safe_mean = safe_play_mean_df["perc_safe_play_places"].mean()

safe_play_mean_df["play_above_mean"] = safe_play_mean_df["perc_safe_play_places"].apply(lambda x: 1 if x > safe_mean else 0)


#renaming for ease of labeling (help from chatGPT)
safe_play_mean_df["play_above_mean"] = safe_play_mean_df["play_above_mean"].map({0: "Below Mean", 1: "Above Mean"})
```

```{python}
import altair as alt
```

```{python}
#first plot exploring the above data

scatter = alt.Chart(safe_play_mean_df).mark_circle().encode(
    alt.X("median_income:Q", 
        scale = alt.Scale(domain=[safe_play_mean_df["median_income"].min(), safe_play_mean_df["median_income"].max()]),
        title = "Median Income"),
    alt.Y("le_at_birth:Q", 
        scale = alt.Scale(domain=[safe_play_mean_df["le_at_birth"].min()-2, safe_play_mean_df["le_at_birth"].max()+2]),
        title = "Life Expectancy"),
    color = alt.Color("play_above_mean:N", 
        title = "Safe Play Places")
).properties(
    title = "Exploring Life Expectancy and Median Income by Safe Play Place Categories"
) #title rewritten with chatGPT

safe_play_plot = scatter + scatter.transform_regression("median_income", "le_at_birth", groupby = ["play_above_mean"]).mark_line()

safe_play_plot.show()

safe_play_plot.save("safe_play_plot.png")
```

